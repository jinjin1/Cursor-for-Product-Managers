---
alwaysApply: false
---

# Rules: Synthesize Interview Snapshots

## Overview
This framework guides you through analyzing multiple interview snapshots to identify common patterns, integrate individual experience maps, and create comprehensive insights that reveal shared user needs and opportunities. It transforms individual data points into actionable patterns that inform product decisions.

## When to Use
- After completing multiple interviews on the same topic or user journey
- When you need to identify shared patterns across different user segments
- Before creating opportunities or generating solutions
- When sharing research findings with stakeholders
- When you have conflicting or unclear insights from individual interviews

## Output
**Format:** Markdown (`.md`)  
**Location:** `user-interviews/synthesis/`  
**Filename:** `synthesis-[topic]-[YYYYMMDD]-[sequence].md`

**Date Guidelines:**
- YYYYMMDD: Synthesis completion date (not interview dates)
- sequence: Two-digit sequence number for same-day syntheses (01, 02, 03...)
- Example: synthesis-newsletter-creation-20250109-01.md

**Multiple Syntheses Same Day:**
- Check existing files before creating new synthesis
- If file exists with same date, increment sequence number
- Never overwrite existing synthesis files
- Preserve all synthesis versions for comparison

---

## Input Validation
**Prerequisites:** 
- [ ] Minimum 3-5 interview snapshots completed using [Create Interview Snapshots](./create-interview-snapshots.mdc)
- [ ] All snapshots follow consistent format and structure
- [ ] Snapshots cover similar topics or user journeys
- [ ] Quality check passed for all individual snapshots

**Data Quality Assessment:**
- **Completeness Score:** [X]/100 based on required sections
- **Behavioral Specificity:** [X]/100 based on concrete examples
- **Quote Quality:** [X]/100 based on representative statements

---

## AI Instructions for Synthesis

### When Receiving Multiple Snapshots
- **Validate Input Quality**: Check if snapshots meet minimum standards from create-interview-snapshots.mdc
- **Identify Research Gaps**: Note missing information that could strengthen synthesis
- **Request Additional Data**: Ask for missing snapshots if sample size is insufficient

### Date Handling Guidelines
- **Filename Date**: Use synthesis completion date in YYYYMMDD format
- **Document Date Range**: Use actual interview date range (e.g., 2025-09-01 - 2025-09-07)
- **Sequence Management**: Check existing files, increment sequence if same date exists
- **Interview Dates**: Extract from individual snapshots to create accurate date range
- **Consistency Check**: Ensure filename date and document completion date match

### Pattern Recognition Guidelines
- **Focus on Behavioral Patterns**: Look for concrete actions, not opinions
- **Identify Emotional Journeys**: Map frustration, delight, confusion patterns
- **Document Workarounds**: Note how users currently solve problems
- **Preserve Context**: Maintain when/where/why details from individual stories

### Quality Standards
- **Evidence Strength**: Multiple participants supporting each pattern
- **Behavioral Specificity**: Concrete examples, not generalizations
- **Segment Clarity**: Clear understanding of user group differences
- **Actionable Insights**: Patterns that inform product decisions

---

## Framework Structure

### 1. Data Preparation
- **Interview Collection**: Gather all relevant interview snapshots
- **Data Standardization**: Ensure consistent format and structure across snapshots
- **Quality Check**: Verify all snapshots are complete and accurate
- **Context Documentation**: Note any relevant background information

### 2. Pattern Analysis
- **Extract Common Elements**: Identify recurring themes, behaviors, and pain points
- **Map Individual Journeys**: Review each snapshot's experience map
- **Find Overlaps**: Discover where individual stories intersect
- **Identify Variations**: Document how different segments behave differently

### 3. Pattern Integration
- **Group Similar Patterns**: Cluster related insights and behaviors
- **Merge Experience Maps**: Combine individual journey stages into shared stages
- **Preserve Unique Elements**: Maintain important segment-specific details
- **Create Shared Narrative**: Develop a comprehensive story that represents all users

### 4. Insight Development
- **Common Patterns**: What patterns emerge across interviews?
- **User Segments**: Are there distinct groups with different needs?
- **Pain Point Clusters**: What problems appear most frequently?
- **Behavior Patterns**: What consistent behaviors do you observe?

---

## Process Flow

### Continuous Discovery Workflow
```
Individual Interviews → Create Snapshots → Synthesize Patterns → Generate Opportunities → Create Solutions
     ↓                    ↓                    ↓                    ↓                    ↓
[Raw Data]        [Structured Stories]   [Shared Patterns]    [Problem Statements] [Product Ideas]
```

### Input-Output Relationship
- **Input:** 3-5 completed interview snapshots from create-interview-snapshots.mdc
- **Process:** Pattern recognition, experience map integration, insight synthesis
- **Output:** Comprehensive synthesis document with integrated experience map
- **Next Step:** Use synthesis to create opportunities and generate solutions

---

## Synthesis Template

```markdown
# What We Learned: [Research Topic] Discovery Research

**Date Range:** [Start Date] - [End Date]  
**Total Participants:** [Number]  
**Research Goal:** [Clear statement]  
**Desired Outcome:** [Expected results]

## Executive Summary
[3-5 key findings with immediate recommendations]

## Participant Overview
| Segment | Count | Key Characteristics |
|---------|-------|-------------------|
| [Segment Name] | [Count] | [Description] |

## Top Opportunities

### 1. [Opportunity Title]
**Frequency:** [X] out of [Y] participants  
**Evidence Strength:** [Strong/Moderate/Weak]  
**Impact:** [High/Medium/Low]  

**The Opportunity:**  
[Problem statement using "We believe..." format]

**Supporting Evidence:**  
- **[User Name (Segment):]** "[Direct quote]" - [Context/Impact]

**Common Story Pattern:**  
[Step-by-step narrative of how users experience this problem]

**Business Impact:**  
[How this affects user retention, satisfaction, or growth]

**Users Affected:** [Which segments experience this]  
**Journey Impact:** [How solving this would improve the user experience]

### 2. [Opportunity Title]
**Frequency:** [X] out of [Y] participants  
**Evidence Strength:** [Strong/Moderate/Weak]  
**Impact:** [High/Medium/Low]  

**The Opportunity:**  
[Problem statement using "We believe..." format]

**Supporting Evidence:**  
- **[User Name (Segment):]** "[Direct quote]" - [Context/Impact]

**Common Story Pattern:**  
[Step-by-step narrative of how users experience this problem]

**Business Impact:**  
[How this affects user retention, satisfaction, or growth]

**Users Affected:** [Which segments experience this]  
**Journey Impact:** [How solving this would improve the user experience]

## Key Insights

### 1. [Insight 1]
**What:** [Clear statement of the insight]  
**Evidence:** [Supporting quotes and observations]  
**Implications:** [What this means for our product]

### 2. [Insight 2]
**What:** [Clear statement of the insight]  
**Evidence:** [Supporting quotes and observations]  
**Implications:** [What this means for our product]

## Research Gaps
- [Unanswered question 1]
- [Unanswered question 2]
- [Areas needing more research]

## Next Steps
- [ ] [Next research action 1]
- [ ] [Next research action 2]
- [ ] [Product action 1]
- [ ] [Product action 2]
```

## Experience Map Integration Output

### Purpose
The Integrated Experience Map section synthesizes individual user journey maps into a comprehensive, shared experience that reveals common patterns while preserving segment-specific variations.

### Structure Requirements

#### Experience Overview
- **Scope**: Clear start and end points of the user journey
- **Goal**: The desired outcome users are trying to achieve
- **Primary User**: Representative user persona for this experience

#### Integrated Experience Map Template (Following create-interview-snapshots.mdc format)

**Stage [X]: [Stage Title]**
- **Common Actions:** [Specific behaviors across participants]
- **Shared Thoughts:** [Mental models and expectations]
- **Emotional Journey:** [Frustration, delight, confusion patterns]
- **Pain Points:** [Frequently mentioned challenges]
- **Workarounds:** [Current problem-solving approaches]
- **Segment Variations:** [How different users behave]
- **Supporting Evidence:** [Quotes from multiple participants]

**Quality Indicators:**
- [ ] Actions are concrete and specific (not generalizations)
- [ ] Emotions are tied to specific moments and contexts
- [ ] Pain points include frequency and impact data
- [ ] Workarounds show current coping strategies
- [ ] Variations explain why segments differ
- [ ] Evidence comes from multiple participants

### Integration Process

#### Step 1: Map Comparison
- Overlay individual experience maps from each interview
- Identify common stages and decision points
- Note where individual journeys diverge

#### Step 2: Stage Consolidation
- Group similar activities into shared stages
- Maintain logical flow and progression
- Preserve important variations between segments

#### Step 3: Pattern Extraction
- Identify common thoughts, feelings, and pain points
- Document segment-specific variations
- Note workarounds and coping strategies

#### Step 4: Evidence Collection
- Gather supporting quotes for each stage element
- Include behavioral observations
- Note frequency of patterns across participants

### Quality Standards

#### Strong Experience Map Integration
- **Clear Stage Progression**: Logical flow from start to finish
- **Rich Context**: Thoughts, feelings, and pain points at each stage
- **Segment Variations**: Clear documentation of how different users behave
- **Evidence Support**: Multiple quotes and observations supporting each element
- **Actionable Insights**: Clear understanding of where and why problems occur

#### Weak Experience Map Integration
- **Vague Stages**: Unclear what happens at each stage
- **Missing Context**: Only actions without thoughts/feelings
- **Over-Generalization**: Losing important segment differences
- **Limited Evidence**: Few supporting quotes or observations
- **Unclear Flow**: Stages don't connect logically

### Example Output Structure

```markdown
## Integrated Experience Map

### Experience Overview
**Scope:** From initial app discovery to successful pattern creation  
**Goal:** Create a drum pattern that matches their musical vision  
**Primary User:** Music students using the app for assignments and practice

### Shared Experience Stages

#### Stage 1: App Discovery & First Use
**Common Actions:** Users download app, open for first time, attempt basic pattern creation  
**Shared Thoughts:** "This should be simple like other drum machine apps I've used"  
**Emotional Journey:** Excited to try something new, optimistic about ease of use  
**Pain Points:** Limited time signature options, grid doesn't match musical concepts  
**Workarounds:** Try to force musical ideas into 4/4 time, use app for simple patterns only  
**Segment Variations:** 
- Advanced users: Quickly identify limitations and work around them
- Beginners: Struggle to understand why their ideas don't work

**Supporting Evidence:**
- "I couldn't figure out how to make it feel like 6/8 instead of 4/4" - Maya (Beginner)
- "The pattern I had in mind was really syncopated... your grid doesn't really show me where the 'ands' are" - Alex (Advanced)
```

### Integration with Opportunity Analysis

The Integrated Experience Map should directly support the Top Opportunities section by:

1. **Providing Context**: Show where in the user journey each opportunity occurs
2. **Supporting Evidence**: Demonstrate the frequency and impact of problems
3. **Segment Variations**: Explain why different users experience problems differently
4. **Workaround Analysis**: Reveal current coping strategies that could inform solutions

---

## Synthesis Methods

### 1. Affinity Mapping
- **Process**: Group similar insights, quotes, and observations
- **Benefits**: Visual organization of complex data
- **When to Use**: With 5+ interviews or complex topics
- **Tools**: Sticky notes, whiteboards, digital tools

### 2. Thematic Analysis
- **Process**: Identify recurring themes across interviews
- **Benefits**: Systematic approach to pattern recognition
- **When to Use**: When you need structured analysis
- **Steps**: Read, code, theme, review, define

### 3. Experience Map Integration
- **Process**: Combine individual journey maps into shared stages
- **Benefits**: Understanding the full user experience across segments
- **When to Use**: When researching multi-step processes
- **Elements**: Common stages, variations, emotions, pain points

### 4. Comparative Analysis
- **Process**: Compare and contrast different user segments
- **Benefits**: Understanding user differences and similarities
- **When to Use**: When you have distinct user groups
- **Focus**: Needs, behaviors, pain points, goals

---

## Pattern Recognition Techniques

### 1. Frequency Analysis
- **Count**: How often does something appear?
- **Weight**: How important is it to users?
- **Consistency**: Does it appear across different user types?

### 2. Intensity Analysis
- **Emotional Impact**: How strongly do users feel about this?
- **Urgency**: How critical is this problem?
- **Frustration Level**: How much does this bother users?

### 3. Context Analysis
- **When**: Under what circumstances does this occur?
- **Where**: In what environments or situations?
- **Why**: What triggers or causes this behavior?

---

## Key Principles

### 1. Preserve Individual Stories
- **Goal**: Find shared patterns while maintaining specific details
- **Approach**: Look for commonalities without losing individual insights
- **Practice**: Ask "What do these stories have in common?" and "How do they differ?"

### 2. Focus on Pattern Integration
- **Structure**: Organize around shared experiences and variations
- **Flow**: Show how patterns emerge across different users
- **Context**: Include thoughts, feelings, and pain points at each stage

### 3. Evidence-Based Synthesis
- **Support**: Every insight should have supporting quotes or observations
- **Frequency**: Note how often patterns appear
- **Variations**: Document differences between user segments

### 4. Actionable Outputs
- **Opportunities**: Specific problems worth solving
- **Insights**: Understanding that informs product decisions
- **Next Steps**: Clear actions for research and product teams

---

## Quality Indicators

### Strong Evidence
- **Multiple Sources**: Same insight from different users
- **Consistent Patterns**: Similar behaviors across interviews
- **Specific Examples**: Concrete stories and quotes
- **Contextual Detail**: Rich understanding of when/why

### Weak Evidence
- **Single Source**: Only one user mentioned this
- **Vague Patterns**: General statements without specifics
- **Assumptions**: What you think vs. what users said
- **Over-Generalization**: Losing important details

---

## Error Handling

### Insufficient Data
- **Too Few Snapshots**: Request additional interviews before synthesis
- **Incomplete Snapshots**: Ask for missing information or re-interview
- **Poor Quality Data**: Suggest improvements to interview process

### Pattern Recognition Issues
- **No Clear Patterns**: Indicate need for more interviews or different approach
- **Conflicting Evidence**: Document contradictions and request clarification
- **Weak Evidence**: Highlight areas needing stronger support

### Quality Issues
- **Over-Generalization**: Push for specific behavioral examples
- **Missing Context**: Request additional details from original interviews
- **Unclear Variations**: Ask for better segment differentiation

### Date Handling Issues
- **Filename vs Content Mismatch**: Ensure filename uses synthesis completion date, content uses interview date range
- **Incorrect Date Format**: Use YYYYMMDD-sequence for filename, YYYY-MM-DD for content
- **Missing Date Range**: Extract dates from individual snapshots to create accurate range
- **Sequence Conflicts**: Always check existing files before creating new synthesis
- **Overwriting Prevention**: Never overwrite existing synthesis files, always increment sequence

---

## Common Synthesis Mistakes

### 1. Losing Individual Stories
- **Problem**: Over-generalizing to the point of losing specific insights
- **Solution**: Maintain balance between patterns and details
- **Practice**: Ask "What specific examples support this pattern?"

### 2. Ignoring Segment Differences
- **Problem**: Assuming all users follow the same journey
- **Solution**: Document variations by user segment
- **Practice**: Ask "How do different user types behave differently?"

### 3. Skipping Context
- **Problem**: Focusing only on actions without thoughts/feelings
- **Solution**: Include emotional and cognitive context at each stage
- **Practice**: Ask "What are users thinking and feeling at this stage?"

### 4. Confirmation Bias
- **Problem**: Only seeing what confirms your assumptions
- **Solution**: Actively look for contradictory evidence
- **Practice**: Ask "What would disprove this insight?"

### 5. Jumping to Solutions
- **Problem**: Moving too quickly from insights to solutions
- **Solution**: Stay in the problem space longer
- **Practice**: Ask "What else do we need to understand?"

### 6. Date Confusion
- **Problem**: Using current date instead of interview dates for content, or vice versa for filename
- **Solution**: Clear separation between synthesis completion date (filename) and interview date range (content)
- **Practice**: Always extract interview dates from snapshots, use current date for filename

---

## Best Practices

### Do's
- Synthesize after multiple interviews on the same topic
- Focus on finding common patterns across individual stories
- Document variations by user segment
- Include supporting evidence for all insights
- Use the synthesis to identify opportunities
- Look for patterns, not just individual stories
- Document your synthesis process and reasoning
- Share findings with stakeholders for validation
- Use correct date formats: YYYYMMDD-sequence for filename, YYYY-MM-DD for content
- Extract interview dates from snapshots for accurate date range
- Check existing files before creating new synthesis
- Increment sequence number for same-day syntheses
- Preserve all synthesis versions for comparison

### Don'ts
- Don't synthesize too early (before patterns emerge)
- Don't lose individual story details in generalization
- Don't ignore contradictory evidence
- Don't assume one user represents all users
- Don't skip the synthesis step to save time
- Don't mix up synthesis completion date with interview dates
- Don't use inconsistent date formats
- Don't overwrite existing synthesis files
- Don't skip sequence number checking

---

## Quality Assurance Checklist

### Input Validation (Based on create-interview-snapshots.mdc)
- [ ] All snapshots follow the required structure from create-interview-snapshots.mdc
- [ ] Each snapshot contains concrete behavioral details (not generalizations)
- [ ] Experience maps include actions, thoughts, feelings, and pain points
- [ ] Opportunities are specific and actionable
- [ ] Insights go beyond individual stories

### Synthesis Quality
- [ ] Patterns emerge from multiple participants (not single stories)
- [ ] Integrated experience map preserves individual context
- [ ] Segment variations are clearly documented
- [ ] Evidence supports each insight and opportunity
- [ ] Research gaps are identified for future investigation

### Output Validation
- [ ] Synthesis provides clear context for opportunities
- [ ] Next steps are actionable for product teams
- [ ] Findings can inform solution generation
- [ ] Stakeholders can understand and act on insights
- [ ] Experience map integration provides clear context for opportunities
- [ ] Each stage includes supporting evidence from multiple participants
- [ ] Segment variations are clearly documented with rationale

### Date Validation
- [ ] Filename uses synthesis completion date in YYYYMMDD format
- [ ] Sequence number is correctly incremented for same-day syntheses
- [ ] Document content uses interview date range in YYYY-MM-DD format
- [ ] Date range accurately reflects all interview dates from snapshots
- [ ] No confusion between synthesis date and interview dates
- [ ] No overwriting of existing synthesis files

---

## Related Frameworks
- [Create Interview Snapshots](./create-interview-snapshots.mdc)
- [Create Opportunities](./create-opportunities.mdc)
- [Generate Solutions](./generate-solutions.mdc)